name: Run Test Workflow

on:
  pull_request:
    branches:
      - "**"
  push:
    branches:
      - "**"

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  setup:
    name: Set Up Environment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Docker
        run: docker --version

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

  test-backends:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        backend:
          - {
              name: "fastapi_app",
              python_version: "3.10",
              api_check_url: "http://localhost:5001",
            }
          - {
              name: "notification_service",
              python_version: "3.10",
              api_check_url: "http://localhost:5003",
            }
    steps:
      - name: Run Backend Test Template
        uses: ./.github/workflows/backend-test-template.yml
        with:
          working_directory: ${{ matrix.backend.name }}
          python_version: ${{ matrix.backend.python_version }}
          api_check_url: ${{ matrix.backend.api_check_url }}

  test-frontends:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        frontend:
          - { name: "marketplace-frontend", node_version: "22" }
          - { name: "auth-frontend", node_version: "22" }
    steps:
      - name: Run Frontend Test Template
        uses: ./.github/workflows/frontend-test-template.yml
        with:
          working_directory: ${{ matrix.frontend.name }}
          node_version: ${{ matrix.frontend.node_version }}

  upload-coverage:
    name: Upload Coverage Reports
    runs-on: ubuntu-latest
    needs: [test-backends, test-frontends]

    strategy:
      matrix:
        coverage:
          - {
              file: "./marketplace-frontend/coverage/jest/marketplace-frontend-lcov.info",
              artifact: "frontend-coverage",
              type: "Jest",
            }
          - {
              file: "./auth-frontend/coverage/jest/auth-frontend-lcov.info",
              artifact: "frontend-coverage",
              type: "Jest",
            }
          - {
              file: "./fastapi_app-coverage.xml",
              artifact: "python-coverage-fastapi_app",
              type: "Python",
            }
          - {
              file: "./notification_service-coverage.xml",
              artifact: "python-coverage-notification_service",
              type: "Python",
            }

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Coverage Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.coverage.artifact }}

      - name: Fix Permissions for Coverage File
        run: |
          chmod 644 ${{ matrix.coverage.file }}
          ls -l ${{ matrix.coverage.file }}

      - name: Debug Coverage File
        run: |
          echo "Debugging Coverage File (${matrix.coverage.type}):"
          cat ${{ matrix.coverage.file }}

      - name: Upload Coverage to Codacy
        uses: codacy/codacy-coverage-reporter-action@master
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: ${{ matrix.coverage.file }}

  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs:
      - test-backends
      - test-frontends
    strategy:
      matrix:
        service:
          - {
              name: "marketplace-api",
              context: "./fastapi_app",
              dockerfile: "./fastapi_app/Dockerfile",
            }
          - {
              name: "notification-service",
              context: "./notification_service",
              dockerfile: "./notification_service/Dockerfile",
            }
          - {
              name: "marketplace-frontend",
              context: "./marketplace-frontend",
              dockerfile: "./marketplace-frontend/Dockerfile",
            }
          - {
              name: "auth-frontend",
              context: "./auth-frontend",
              dockerfile: "./auth-frontend/Dockerfile",
            }
    steps:
      - name: Run Docker Build and Push Template
        uses: ./.github/workflows/docker-build-push-template.yml
        with:
          context: ${{ matrix.service.context }}
          dockerfile: ${{ matrix.service.dockerfile }}
          image_name: dverse/${{ matrix.service.name }}
          platforms: linux/amd64,linux/arm64

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-images
    steps:
      - name: Run Deploy Template
        uses: ./.github/workflows/deploy-template.yml
        with:
          deploy_script: |
            echo "Starting deployment..."
            echo "Deploying services to production environment..."
            echo "Deployment complete!"
