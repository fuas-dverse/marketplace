name: CI/CD Workflow

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  setup:
    name: Set Up Environment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@3d90fdb5a05a433d6d49d4d5b19a659d2b8cbd0a # Pinned SHA

      - name: Set Up Docker
        run: docker --version

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

  frontend-tests:
    name: Run Frontend Tests
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: write
    needs: setup

    steps:
      - name: Checkout Code
        uses: actions/checkout@3d90fdb5a05a433d6d49d4d5b19a659d2b8cbd0a # Pinned SHA

      - name: Set Up Node.js
        uses: actions/setup-node@a9b9074df3883709e2bb46b1821b8b82bc7a5c2d # v3 Pinned SHA
        with:
          node-version: "18"

      - name: Install Dependencies
        working-directory: marketplace-frontend
        run: npm install

      - name: Run Frontend Tests with Coverage
        working-directory: marketplace-frontend
        run: npm test -- --coverage

      - name: Save Jest Coverage Report
        uses: actions/upload-artifact@43bcf8a162d89dd1c8736365ebed8b303b08d0e0 # v3 Pinned SHA
        with:
          name: frontend-coverage
          path: marketplace-frontend/coverage/jest/lcov.info

      - name: Verify Jest Coverage Report
        run: ls -l marketplace-frontend/coverage/jest/lcov.info

      - name: Publish Jest Coverage Report
        uses: ArtiomTr/jest-coverage-report-action@21ffde48be193b55a21043ad7037624b06b0f64c # v2 Pinned SHA
        with:
          working-directory: marketplace-frontend
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  backend-tests:
    name: Run Backend Tests
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout Code
        uses: actions/checkout@3d90fdb5a05a433d6d49d4d5b19a659d2b8cbd0a # Pinned SHA

      - name: Set Up Python
        uses: actions/setup-python@5765615a2481781c792004653a7917d6d82b6d44 # v3 Pinned SHA
        with:
          python-version: "3.10"

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r fastapi_app/requirements.txt

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Build and Start Services
        run: |
          docker-compose up --build -d
          docker-compose ps

      - name: Wait for API to be ready
        run: |
          until curl -f http://localhost:5001; do
            echo "Waiting for API..."
            sleep 5
          done

      - name: Run Backend Tests with Coverage
        run: |
          pytest fastapi_app/tests/ --cov=fastapi_app --cov-report=xml

      - name: Save Python Coverage Report
        uses: actions/upload-artifact@43bcf8a162d89dd1c8736365ebed8b303b08d0e0 # v3 Pinned SHA
        with:
          name: python-coverage
          path: coverage.xml

      - name: Verify Python Coverage Report
        run: ls -l coverage.xml

      - name: Tear Down Services
        if: always()
        run: docker-compose down

  upload-coverage:
    name: Upload Coverage Reports
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]

    steps:
      - name: Checkout Code
        uses: actions/checkout@3d90fdb5a05a433d6d49d4d5b19a659d2b8cbd0a # Pinned SHA

      - name: Download Python Coverage Report
        uses: actions/download-artifact@43bcf8a162d89dd1c8736365ebed8b303b08d0e0 # v3 Pinned SHA
        with:
          name: python-coverage

      - name: Download Frontend Coverage Report
        uses: actions/download-artifact@43bcf8a162d89dd1c8736365ebed8b303b08d0e0 # v3 Pinned SHA
        with:
          name: frontend-coverage

      - name: Fix Permissions for Coverage Files
        run: |
          chmod 644 ./coverage.xml ./lcov.info
          ls -l ./coverage.xml ./lcov.info

      - name: Debug Jest Coverage File
        run: |
          echo "Jest Coverage File Content:"
          cat ./lcov.info

      - name: Debug Python Coverage File
        run: |
          echo "Python Coverage File Content:"
          cat ./coverage.xml

      - name: Upload Python Coverage to Codacy
        uses: codacy/codacy-coverage-reporter-action@a0b72f4b1923bcf1ad90b3e33486de8c36b7bfa3 # Pinned SHA
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: ./coverage.xml

      - name: Upload Jest Coverage to Codacy
        uses: codacy/codacy-coverage-reporter-action@a0b72f4b1923bcf1ad90b3e33486de8c36b7bfa3 # Pinned SHA
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: ./lcov.info

  push-docker-image:
    name: Build and Push Marketplace API Image
    runs-on: ubuntu-latest
    needs: [setup, backend-tests]
    if: github.ref_name == 'main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@3d90fdb5a05a433d6d49d4d5b19a659d2b8cbd0a # Pinned SHA

      - name: Log in to Docker Hub
        uses: docker/login-action@c1b86c7d6cd906bc3f2b3f02b3a9d600f5dcb789 # Pinned SHA
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@5d0f36192c9bcd6b31c336f11ac7fc6c231a90e3 # Pinned SHA

      - name: Build and Push Docker Image
        uses: docker/build-push-action@1793b6b5467608211abac8f3d8c61924df8a0dc4 # Pinned SHA
        with:
          context: ./fastapi_app
          file: ./fastapi_app/DockerFile
          push: true
          tags: |
            dverse/marketplace-api:latest
            dverse/marketplace-api:${{ github.run_number }}

      - name: Verify Docker Image
        run: docker pull dverse/marketplace-api:${{ github.run_number }}

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    if: github.ref_name == 'main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@3d90fdb5a05a433d6d49d4d5b19a659d2b8cbd0a # Pinned SHA

      - name: Deploy Application
        run: |
          echo "Fake deploying the application..."
