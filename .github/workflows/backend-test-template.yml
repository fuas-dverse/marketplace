name: Backend Test Workflow Template

on:
  workflow_call:
    inputs:
      working_directory:
        description: "The directory of the backend project"
        required: true
        type: string
      python_version:
        description: "Python version"
        required: true
        type: string
      api_check_url:
        description: "URL to check if the API is ready"
        required: true
        type: string

jobs:
  backend-tests:
    name: Run Backend Tests
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ${{ inputs.working_directory }}/requirements.txt

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Build and Start Services
        run: |
          docker-compose build --no-cache
          docker-compose up -d
          docker-compose ps

      - name: Wait for Service to Be Ready
        run: |
          if [ "${{ inputs.working_directory }}" = "fastapi_app" ]; then
            echo "Checking FastAPI App API availability..."
            MAX_RETRIES=5
            COUNT=0
            while ! curl -f http://localhost:5001; do
              COUNT=$((COUNT+1))
              if [ $COUNT -eq $MAX_RETRIES ]; then
                echo "FastAPI App failed to respond after $MAX_RETRIES attempts."
                exit 1
              fi
              echo "Waiting for FastAPI App... attempt $COUNT/$MAX_RETRIES"
              sleep 10
            done
            echo "FastAPI App is ready!"
          elif [ "${{ inputs.working_directory }}" = "notification_service" ]; then
            echo "Checking Notification Service port availability..."
            MAX_RETRIES=5
            COUNT=0
            while ! nc -zv localhost 5003; do
              COUNT=$((COUNT+1))
              if [ $COUNT -eq $MAX_RETRIES ]; then
                echo "Notification Service port 5003 is not open after $MAX_RETRIES attempts."
                exit 1
              fi
              echo "Waiting for Notification Service port 5003... attempt $COUNT/$MAX_RETRIES"
              sleep 10
            done
            echo "Notification Service port 5003 is open!"
          else
            echo "Unsupported working directory: ${{ inputs.working_directory }}"
            exit 1
          fi

      - name: Run Backend Tests with Coverage
        run: |
          coverage run -m pytest ${{ inputs.working_directory }}
          coverage xml -o coverage.xml

      - name: Save Python Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: python-coverage-${{ inputs.working_directory }}
          path: coverage.xml

      - name: Verify Python Coverage Report
        run: ls -l coverage.xml

      - name: Tear Down Services
        if: always()
        run: docker-compose down
