name: Test and Build Workflow

on:
  pull_request:
    branches:
      - "**"
  push:
    branches:
      - "main"

permissions:
  contents: write
  pull-requests: write
  checks: write

jobs:
  setup:
    name: Set Up Environment
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Debug Directory
        run: ls -R .github

      - name: Set Up Docker
        run: docker --version

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

  code-analysis:
    needs: setup
    strategy:
      matrix:
        include:
          - python_directory: "./fastapi_app"
          - python_directory: "./notification_service"
          - eslint_directory: "./marketplace-frontend"
          - eslint_directory: "./auth-frontend"
    uses: ./.github/workflows/code-analysis-template.yml
    with:
      python_directory: ${{ matrix.python_directory }}
      eslint_directory: ${{ matrix.eslint_directory }}
      pylint_rcfile: .pylintrc

  test-backends:
    needs: [setup, code-analysis]
    strategy:
      matrix:
        backend:
          - name: fastapi_app
            python_version: "3.10"
            api_check_url: "http://localhost:5001"
          - name: notification_service
            python_version: "3.10"
            api_check_url: "http://localhost:5003"
    uses: ./.github/workflows/backend-test-template.yml
    with:
      working_directory: ${{ matrix.backend.name }}
      python_version: ${{ matrix.backend.python_version }}
      api_check_url: ${{ matrix.backend.api_check_url }}
    secrets:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      NATS_SERVER_URL: ${{ secrets.NATS_SERVER_URL }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}

  test-frontends:
    needs: [setup, code-analysis]
    strategy:
      matrix:
        frontend:
          - name: marketplace-frontend
            node_version: "22"
          - name: auth-frontend
            node_version: "22"
    uses: ./.github/workflows/frontend-test-template.yml
    with:
      working_directory: ${{ matrix.frontend.name }}
      node_version: ${{ matrix.frontend.node_version }}

  upload-coverage:
    needs: [test-backends, test-frontends]
    strategy:
      matrix:
        coverage:
          - {
              file: "lcov.info",
              artifact: "marketplace-frontend-coverage",
              type: "Jest",
            }
          - {
              file: "lcov.info",
              artifact: "auth-frontend-coverage",
              type: "Jest",
            }
          - {
              file: "coverage.xml",
              artifact: "python-coverage-fastapi_app",
              type: "Python",
            }
          - {
              file: "coverage.xml",
              artifact: "python-coverage-notification_service",
              type: "Python",
            }
    uses: ./.github/workflows/upload-coverage-template.yml
    with:
      coverage_file: ${{ matrix.coverage.file }}
      artifact_name: ${{ matrix.coverage.artifact }}
      coverage_type: ${{ matrix.coverage.type }}
    secrets:
      codecov_token: ${{ secrets.CODECOV_TOKEN }}

  end-to-end:
    needs: [test-frontends, test-backends]
    strategy:
      matrix:
        frontend:
          - name: marketplace-frontend
            working_directory: marketplace-frontend
          - name: auth-frontend
            working_directory: auth-frontend
    uses: ./.github/workflows/playwright.yml
    with:
      name: ${{ matrix.frontend.name }}
      working_directory: ${{ matrix.frontend.working_directory }}
    secrets:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      NATS_SERVER_URL: ${{ secrets.NATS_SERVER_URL }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}

  locust-load-test:
    runs-on: ubuntu-22.04
    needs: [test-backends, test-frontends]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Build and Start Services
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NATS_SERVER_URL: ${{ secrets.NATS_SERVER_URL }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        run: |
          docker-compose build
          docker-compose up -d
          docker-compose ps

      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Locust
        run: |
          python -m pip install --upgrade pip
          pip install locust

      - name: Wait for API to be ready
        run: |
          for i in {1..5}; do
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:5001 | grep "200"; then
              echo "API is ready!"
              exit 0
            fi
            echo "API not ready. Retrying in 10 seconds... ($i/5)"
            sleep 10
          done
          echo "API failed to start after 5 attempts."
          exit 1

      - name: Run Locust Tests
        run: |
          locust -f fastapi_app/app/tests/load_tests/locustfile.py \
            --headless \
            --users 10 \
            --spawn-rate 1 \
            --host http://localhost:5001 \
            --run-time 1m \
            --html locust_report.html

      - name: Upload Locust Report
        uses: actions/upload-artifact@v4
        with:
          name: locust-report
          path: locust_report.html

      - name: Query Prometheus Metrics
        run: |
          curl -X GET "http://localhost:9090/api/v1/query?query=up" -o metrics.json
          cat metrics.json

      - name: Upload Prometheus Metrics
        uses: actions/upload-artifact@v4
        with:
          name: prometheus-metrics
          path: metrics.json

  build-images:
    needs: [test-backends, test-frontends]
    strategy:
      matrix:
        service:
          - {
              name: "marketplace-api",
              context: "./fastapi_app",
              dockerfile: "./fastapi_app/Dockerfile",
            }
          - {
              name: "notification-service",
              context: "./notification_service",
              dockerfile: "./notification_service/Dockerfile",
            }
          - {
              name: "marketplace-frontend",
              context: "./marketplace-frontend",
              dockerfile: "./marketplace-frontend/Dockerfile",
            }
          - {
              name: "auth-frontend",
              context: "./auth-frontend",
              dockerfile: "./auth-frontend/Dockerfile",
            }
    uses: ./.github/workflows/docker-build-push-template.yml
    with:
      context: ${{ matrix.service.context }}
      dockerfile: ${{ matrix.service.dockerfile }}
      image_name: dverse/${{ matrix.service.name }}
      platforms: linux/amd64,linux/arm64
    secrets:
      docker_username: ${{ secrets.DOCKER_USERNAME }}
      docker_password: ${{ secrets.DOCKER_PASSWORD }}

  push-to-gcr:
    name: Push Images to GCR
    needs: build-images
    strategy:
      matrix:
        image:
          - marketplace-api:multiplatform
          - notification-service:multiplatform
          - marketplace-frontend:multiplatform
          - auth-frontend:multiplatform

    uses: ./.github/workflows/push-to-gcr-template.yml
    with:
      image: ${{ matrix.image }}
    secrets:
      project_id: ${{ secrets.GCP_PROJECT_ID }}
      gcp_credentials: ${{ secrets.GCP_CREDENTIALS }}

  deploy:
    name: Deploy to GKE
    needs: push-to-gcr
    strategy:
      matrix:
        deployment:
          - deployment_yaml: deployment/marketplace-service.yaml
            service_name: marketplace-service
          - deployment_yaml: deployment/notification-service.yaml
            service_name: notification-service
          - deployment_yaml: deployment/frontend-deployment.yaml
            service_name: marketplace-frontend
          - deployment_yaml: deployment/auth-frontend-deployment.yaml
            service_name: auth-frontend
    uses: ./.github/workflows/deploy-to-gke-template.yml
    with:
      deployment_yaml: ${{ matrix.deployment.deployment_yaml }}
      service_name: ${{ matrix.deployment.service_name }}
    secrets:
      gcp_credentials: ${{ secrets.GCP_CREDENTIALS }}
      cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
      region: ${{ secrets.GKE_CLUSTER_ZONE }}
