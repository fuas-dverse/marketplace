name: END 2 END

on:
  push:
    branches:
      - "update-docker-compose"

permissions:
  contents: write
  pull-requests: write
  checks: write

jobs:
  end2end-testing:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: ["22"]
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: username
          POSTGRES_PASSWORD: password
          POSTGRES_DB: auth_db
        ports:
          - "5432:5432"
        options: >-
          --health-cmd="pg_isready -U username -d auth_db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      db:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - "5435:5432"
        options: >-
          --health-cmd="pg_isready -U marketplace -d marketplace_db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      nats:
        image: nats:latest
        ports:
          - "4222:4222"

      api-gateway:
        image: dverse/api-gateway:anna
        env:
          AUTH_SVC_ADDRESS: "auth-service:5000"
          MARKETPLACE_SVC_ADDRESS: "marketplace-service:5001"
          NOTIFICATION_SVC_ADDRESS: "notification-service:5003"
        ports:
          - "8080:8080"
        options: >-
          --health-cmd="curl -f http://localhost:8080/hello"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      auth-service:
        image: dverse/auth-service:anna
        env:
          DATABASE_URL: postgresql://username:password@postgres/auth_db
          JWT_SECRET_KEY: secretkey
        ports:
          - "5000:5000"
        options: >-
          --health-cmd="curl -f http://localhost:5000"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      marketplace-service:
        image: dverse/marketplace-api:latest
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NATS_SERVER_URL: ${{ secrets.NATS_SERVER_URL }}
        ports:
          - "5001:5001"
        options: >-
          --health-cmd="curl -f http://localhost:5001/health"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      notification-service:
        image: dverse/notification-service:latest
        env:
          NOTIFICATION_TYPE: in_app
          NATS_SERVER_URL: ${{ secrets.NATS_SERVER_URL }}
        ports:
          - "5003:5003"
        options: >-
          --health-cmd="curl -f http://localhost:5003"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      auth-frontend:
        image: dverse/auth-frontend:latest
        ports:
          - "3002:3002"
        env:
          PORT: 3002
          AUTH_BACKEND_URL: http://api-gateway:8080/api/v1/auth
          API_BASE_URL: http://api-gateway:8080/api/v1
        options: >-
          --health-cmd="curl -f http://localhost:3002"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    #   marketplace-frontend:
    #     image: dverse/marketplace-frontend:latest
    #     ports:
    #       - "3001:3001"
    #     env:
    #       NATS_SERVER_URL: nats://nats:4222
    #       FASTAPI_URL: http://marketplace-service:5001
    #       CUDA_DEVICE: 0
    #       WEBSOCKET_URL: ws://notification-service:5003/ws
    #       API_URL: http://api-gateway:8080/api/v1
    #       PORT: 3001
    #       NEXT_PUBLIC_AUTH_FRONTEND_URL: http://localhost:3002
    #       NEXT_PUBLIC_AUTH_BACKEND_URL: http://api-gateway:8080/api/v1/auth

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Check auth-service logs (wildcard match)
        run: |
          CONTAINER_ID=$(docker ps -qf "name=auth-frontend")
          if [ -n "$CONTAINER_ID" ]; then
          docker logs $CONTAINER_ID
          else
          echo "auth-service container not found."
          fi

      - name: Wait for services
        run: |
          docker ps
          for i in {1..10}; do
          curl -f http://localhost:3002 && break || sleep 5
          done
          for i in {1..10}; do
          curl -f http://localhost:8080/hello && break || sleep 5
          done

      - name: Check auth-service logs
        run: docker logs $(docker ps -qf "name=auth-service")

      - name: Check api-gateway logs
        run: docker logs $(docker ps -qf "name=api-gateway")

      - name: Install dependencies
        working-directory: auth-frontend
        run: npm install

      - name: Install Playwright Browsers
        working-directory: auth-frontend
        run: npx playwright install --with-deps

      - name: Wait for services
        run: |
          docker ps
          for i in {1..10}; do
          curl -f http://localhost:3002 && break || sleep 5
          done
          for i in {1..10}; do
          curl -f http://localhost:8080/hello && break || sleep 5
          done

      - name: Run Playwright tests
        working-directory: auth-frontend
        run: npm run test:e2e

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: .src/auth-frontend/playwright-report/
          retention-days: 30
#   end-to-end:
#     strategy:
#       matrix:
#         frontend:
#           - name: marketplace-frontend
#           - name: auth-frontend
#     uses: ./.github/workflows/playwright.yml
#     with:
#       working_directory: ${{ matrix.frontend.name }}
#     secrets:
#       DATABASE_URL: ${{ secrets.DATABASE_URL }}
#       NATS_SERVER_URL: ${{ secrets.NATS_SERVER_URL }}
#       POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
#       POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
#       POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
